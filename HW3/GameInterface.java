
/**
 * When game is created, it will create a new instance of manger and retain the reference.
 * 
 * A team may have only one player or it may have many players. The game will know which 
 * team is up to bat. The manager should in-turn know which player is up to bat.
 * 
 * Constructor:
 *  Accepts the word length and the max attempts.
 * 
 * Private data summary:
 *  A list of teams (Manager classes)
 *  Guess list
 *  Total Wrong Guesses
 *  Game Word
 *  active team reference
 *  
 * 
 * @author Josh Gillham
 * @version 9-19-12
 */
public interface GameInterface{
    /**
     * Submits a guess. The guess is game word. If the letter is contained in the word
     *  then true is returned.
     * 
     * @arg playerID is the id of the player generated by the manager
     * @arg letter is the letter to guess
     * 
     * @return True if the guess is found in the word
     * 
     * @throws IllegalArgumentException when playerID does not represent a player
     * @throws IllegalArgumentException when letter is not a letter i.e. '?' or '9'
     */
    public boolean makeGuess( PlayerInterface player, char letter );
    /**
     * Gets the current word with underscores representing unguessed letters.
     * 
     * Used by the GUI to display to the players.
     * 
     * @return the word with underscores
     */
    public String getWordStatus();
    
    /**
     * Adds a new team and returns the manager of the team.
     * 
     * @return the manager of the new team.
     */
    public ManagerInterface addTeam();
    
    /**
     * Gets the team whose turn to guess.
     * 
     * Preconditions:
     *  at least one call to addTeam()
     *  at least one call to Manager.addPlayer()
     *  startGame() must have been called.
     * 
     * 
     */
    public ManagerInterface getActiveTeam();
    
    /**
     * Starts a new game.
     * 
     * Preconditons:
     *  at least one call to addTeam()
     *  at least one call to Manager.addPlayer()
     */
    public void startGame();
    
}
